// package main

// import "fmt";
// import "access-proxy/internal/config";

// func main() {
//     cfg := config.NewConfig();

//     fmt.Printf("Port: %d\n", cfg.Yaml.Port);
//     fmt.Printf("Allowed Domains: %v\n", cfg.Yaml.AllowedDomains);
//     fmt.Printf("Blocked Methods: %v\n", cfg.Yaml.BlockedMethods);
//     fmt.Printf("Rate Limit: %d\n", cfg.Yaml.RateLimitPerMinute);
//     fmt.Printf("Log Requests: %v\n", cfg.Yaml.LogRequests);
// }


package main

import (
	// "log"
	"net/http"
	"net/http/httputil"
	"net/url"
)

import "github.com/Freyzan2006/go-logger-lib/pkg/logger"

// Target ‚Äî –∞–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
const Target = "https://jsonplaceholder.typicode.com"

func main() {
	log := logger.New("access-proxy.log", logger.LevelDebug, "internal", logger.ModeDev)

	// –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å
	targetURL, err := url.Parse(Target)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ URL: %v", err)
	}

	// –°–æ–∑–¥–∞—ë–º reverse proxy
	proxy := httputil.NewSingleHostReverseProxy(targetURL)

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
	proxy.Director = func(req *http.Request) {
		req.URL.Scheme = targetURL.Scheme
		req.URL.Host = targetURL.Host
		// –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—É—Ç—å:
		// req.URL.Path = "/posts"
	}

	// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ handler —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		log.Infof("üì° %s %s", r.Method, r.URL.Path)
		proxy.ServeHTTP(w, r)
        
	})

	log.Infof("üöÄ Proxy —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}
