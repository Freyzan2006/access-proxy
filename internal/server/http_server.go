// server/http_server.go
package server

import (
	"fmt"
	"net/http"

	"access-proxy/internal/ratelimit"

	"github.com/Freyzan2006/go-logger-lib/pkg/logger"
)

type HttpServer interface {
	RegisterEndpoints()
	ListenAndServe() error
}

type httpServer struct {
	proxy      ProxyServer
	port       int
	log        logger.Logger
	rateLimiter *ratelimit.RateLimiter
	useRateLimit bool
}

func NewHttpServer(proxy ProxyServer, port int, log logger.Logger, rateLimitPerMinute int) HttpServer {
	var rateLimiter *ratelimit.RateLimiter
	useRateLimit := rateLimitPerMinute > 0
	
	if useRateLimit {
		rateLimiter = ratelimit.NewRateLimiter(rateLimitPerMinute, log)
		log.Infof("üîí Rate limiting enabled: %d requests per minute", rateLimitPerMinute)
	}

	return &httpServer{
		proxy:        proxy,
		port:         port,
		log:          log,
		rateLimiter:  rateLimiter,
		useRateLimit: useRateLimit,
	}
}

func (s *httpServer) RegisterEndpoints() {
	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	mainHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		s.log.Infof("üåê %s %s", r.Method, r.URL.Path)
		
		// –ö–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
		if r.URL.Path == "/" {
			s.rootHandler(w, r)
			return
		}
		
		// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
		s.proxy.ServeHTTP(w, r)
	})

	// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ rate limiter –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
	var finalHandler http.Handler = mainHandler
	if s.useRateLimit {
		finalHandler = s.rateLimiter.Middleware(mainHandler)
		s.log.Info("üõ°Ô∏è  Rate limit middleware applied")
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	http.Handle("/", finalHandler)
	http.HandleFunc("/favicon.ico", s.faviconHandler)
	http.HandleFunc("/health", s.healthHandler)
	http.HandleFunc("/ratelimit-info", s.rateLimitInfoHandler)
}

func (s *httpServer) rateLimitInfoHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	
	if !s.useRateLimit {
		fmt.Fprintf(w, `{"rate_limiting": false, "message": "Rate limiting is disabled"}`)
		return
	}
	
	identifier := s.getClientIP(r)
	remaining := s.rateLimiter.GetRemaining(identifier)
	
	fmt.Fprintf(w, `{
		"rate_limiting": true,
		"limit": %d,
		"remaining": %d,
		"window": "1 minute",
		"your_ip": "%s"
	}`, s.rateLimiter.GetLimit(), remaining, identifier)
}

func (s *httpServer) getClientIP(r *http.Request) string {
	if forwarded := r.Header.Get("X-Forwarded-For"); forwarded != "" {
		return forwarded
	}
	return r.RemoteAddr
}

func (s *httpServer) faviconHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	
	w.WriteHeader(http.StatusNoContent)
}

func (s *httpServer) rootHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	fmt.Fprintf(w, `
<!DOCTYPE html>
<html>
<head>
    <title>Access Proxy</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 4px; }
        .rate-limit { background: #fff3cd; padding: 10px; border-radius: 4px; border-left: 4px solid #ffc107; }
        a { color: #007bff; text-decoration: none; }
        a:hover { text-decoration: underline; }
    </style>
    <link rel="icon" href="data:,">
</head>
<body>
    <h1>üöÄ Access Proxy Server</h1>
    <p>–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
    <p><strong>–¶–µ–ª–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä:</strong> https://httpbin.org</p>
    
    <div class="rate-limit">
        <h3>üîí Rate Limiting: –í–ö–õ–Æ–ß–ï–ù</h3>
        <p><strong>–õ–∏–º–∏—Ç:</strong> %d –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É</p>
        <p><a href="/ratelimit-info">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π –ª–∏–º–∏—Ç</a></p>
    </div>
    
    <h3>üì° –¢–µ—Å—Ç–æ–≤—ã–µ endpoint'—ã:</h3>
    <div class="endpoint"><a href="/json" target="_blank">/json</a> - –¢–µ—Å—Ç–æ–≤—ã–π JSON</div>
    <div class="endpoint"><a href="/ip" target="_blank">/ip</a> - –í–∞—à IP –∞–¥—Ä–µ—Å</div>
    <div class="endpoint"><a href="/user-agent" target="_blank">/user-agent</a> - –í–∞—à User-Agent</div>
    <div class="endpoint"><a href="/headers" target="_blank">/headers</a> - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞</div>
    <div class="endpoint"><a href="/get" target="_blank">/get</a> - GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</div>
    
    <h3>‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Rate Limit:</h3>
    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ %d –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ.</p>
</body>
</html>
`, s.rateLimiter.GetLimit(), s.rateLimiter.GetLimit())
}

func (s *httpServer) healthHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	status := "healthy"
	if s.useRateLimit {
		status = "healthy_with_rate_limiting"
	}

	w.Header().Set("Content-Type", "application/json")
	fmt.Fprintf(w, `{"status": "%s", "service": "access-proxy", "port": %d, "rate_limiting": %t}`,
		status, s.port, s.useRateLimit)
}

func (s *httpServer) ListenAndServe() error {
	addr := fmt.Sprintf(":%d", s.port)
	s.log.Infof("üöÄ Server starting on http://localhost%s", addr)
	s.log.Infof("üîí Rate limiting: %t (limit: %d req/min)", s.useRateLimit, s.rateLimiter.GetLimit())
	return http.ListenAndServe(addr, nil)
}

// –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
func (s *httpServer) GetRateLimit() int {
	if s.rateLimiter != nil {
		return s.rateLimiter.GetLimit()
	}
	return 0
}