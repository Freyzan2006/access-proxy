// internal/middleware/method_blocker.go
package middleware

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/Freyzan2006/go-logger-lib/pkg/logger"
)

// MethodBlockerMiddleware –±–ª–æ–∫–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã
func MethodBlockerMiddleware(log logger.Logger, blockedMethods []string) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –ø—É—Å—Ç–æ–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ
			if len(blockedMethods) == 0 {
				next.ServeHTTP(w, r)
				return
			}

			// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Ç–æ–¥ (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
			method := strings.ToUpper(r.Method)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–µ—Ç–æ–¥
			if isMethodBlocked(method, blockedMethods) {
				log.Warnf("üö´ Method blocked: %s %s", method, r.URL.Path)
				w.Header().Set("Content-Type", "application/json")
				w.WriteHeader(http.StatusMethodNotAllowed)
				json.NewEncoder(w).Encode(map[string]interface{}{
					"error":   "method_not_allowed",
					"message": "HTTP method is not allowed",
					"method":  method,
					"blocked_methods": blockedMethods,
				})
				return
			}

			next.ServeHTTP(w, r)
		})
	}
}

// isMethodBlocked –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–µ—Ç–æ–¥
func isMethodBlocked(method string, blockedMethods []string) bool {
	for _, blocked := range blockedMethods {
		if strings.ToUpper(blocked) == method {
			return true
		}
	}
	return false
}