// internal/middleware/domain.go
package middleware

import (
	"encoding/json"
	"net"
	"net/http"
	"strings"

	"github.com/Freyzan2006/go-logger-lib/pkg/logger"
)

// ClientDomainValidator –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω
func ClientDomainValidator(log logger.Logger, allowedDomains []string) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –ø—É—Å—Ç–æ–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ
			if len(allowedDomains) == 0 {
				next.ServeHTTP(w, r)
				return
			}

			// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
			clientIdentifier := extractClientIdentifier(r)
			clientType := getClientType(r)
			
			// –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			log.Infof("üîç Client check - Identifier: %s, Type: %s", clientIdentifier, clientType)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
			if !isClientAllowed(clientIdentifier, allowedDomains) {
				log.Warnf("üö´ Client not allowed: %s (allowed: %v)", clientIdentifier, allowedDomains)
				w.Header().Set("Content-Type", "application/json")
				w.WriteHeader(http.StatusForbidden)
				json.NewEncoder(w).Encode(map[string]interface{}{
					"error":             "client_not_allowed",
					"message":           "Client is not in allowed list",
					"client_identifier": clientIdentifier,
					"client_type":       clientType,
					"allowed_clients":   allowedDomains,
				})
				return
			}

			log.Infof("‚úÖ Client allowed: %s (%s)", clientIdentifier, clientType)
			next.ServeHTTP(w, r)
		})
	}
}

// extractClientIdentifier –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
func extractClientIdentifier(r *http.Request) string {
	// 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Origin (–¥–ª—è CORS –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
	if origin := r.Header.Get("Origin"); origin != "" {
		domain := extractDomainFromURL(origin)
		if domain != "" {
			return domain
		}
	}

	// 2. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Referer
	if referer := r.Header.Get("Referer"); referer != "" {
		domain := extractDomainFromURL(referer)
		if domain != "" {
			return domain
		}
	}

	// 3. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Host
	if host := r.Header.Get("Host"); host != "" {
		domain := strings.Split(host, ":")[0]
		if domain != "" {
			return domain
		}
	}

	// 4. –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º "localhost"
	clientIP := extractClientIP(r)
	if isLocalRequest(clientIP) {
		return "localhost"
	}

	// 5. –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –¥–æ–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º IP
	return clientIP
}

// extractClientIP –∏–∑–≤–ª–µ–∫–∞–µ—Ç IP –∫–ª–∏–µ–Ω—Ç–∞
func extractClientIP(r *http.Request) string {
	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ X-Real-IP
	if realIP := r.Header.Get("X-Real-IP"); realIP != "" {
		return realIP
	}

	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ X-Forwarded-For (–µ—Å–ª–∏ –∑–∞ –ø—Ä–æ–∫—Å–∏)
	if forwarded := r.Header.Get("X-Forwarded-For"); forwarded != "" {
		// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞
		ips := strings.Split(forwarded, ",")
		if len(ips) > 0 {
			return strings.TrimSpace(ips[0])
		}
	}
	
	// –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º RemoteAddr
	return extractIPFromRemoteAddr(r.RemoteAddr)
}

// extractIPFromRemoteAddr –∏–∑–≤–ª–µ–∫–∞–µ—Ç IP –∏–∑ RemoteAddr
func extractIPFromRemoteAddr(remoteAddr string) string {
	if remoteAddr == "" {
		return ""
	}

	// –£–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç
	host, _, err := net.SplitHostPort(remoteAddr)
	if err != nil {
		// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ä—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
		return remoteAddr
	}
	return host
}

// isLocalRequest –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–∏ –∑–∞–ø—Ä–æ—Å
func isLocalRequest(ip string) bool {
	ip = strings.TrimSpace(ip)
	if ip == "" {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
	if ip == "localhost" {
		return true
	}

	// –ü–∞—Ä—Å–∏–º IP –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	parsedIP := net.ParseIP(ip)
	if parsedIP == nil {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
	if parsedIP.IsLoopback() {
		return true
	}
	if parsedIP.IsPrivate() {
		return true
	}
	if parsedIP.IsUnspecified() {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º link-local –∞–¥—Ä–µ—Å–∞
	if parsedIP.IsLinkLocalUnicast() || parsedIP.IsLinkLocalMulticast() {
		return true
	}

	return false
}

// isClientAllowed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
func isClientAllowed(clientIdentifier string, allowedClients []string) bool {
	clientIdentifier = strings.TrimSpace(clientIdentifier)
	if clientIdentifier == "" {
		return false
	}

	for _, allowed := range allowedClients {
		allowed = strings.TrimSpace(allowed)
		if allowed == "" {
			continue
		}

		// –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
		if clientIdentifier == allowed {
			return true
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ IP –¥–∏–∞–ø–∞–∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "192.168.")
		if strings.HasSuffix(allowed, ".") && isIPAddress(clientIdentifier) {
			if strings.HasPrefix(clientIdentifier, allowed) {
				return true
			}
		}
		
		// Wildcard –¥–æ–º–µ–Ω—ã
		if strings.HasPrefix(allowed, "*.") {
			wildcardDomain := allowed[2:]
			if strings.HasSuffix(clientIdentifier, wildcardDomain) {
				return true
			}
		}
		
		// –õ–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
		if clientIdentifier == "localhost" && (allowed == "localhost" || allowed == "127.0.0.1" || allowed == "::1") {
			return true
		}
		
		// IPv6 localhost
		if clientIdentifier == "::1" && (allowed == "localhost" || allowed == "127.0.0.1" || allowed == "::1") {
			return true
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ CIDR –¥–∏–∞–ø–∞–∑–æ–Ω–∞
		if isCIDRRange(allowed) && isIPAddress(clientIdentifier) {
			if isIPInCIDR(clientIdentifier, allowed) {
				return true
			}
		}
	}
	return false
}

// isIPAddress –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ IP –∞–¥—Ä–µ—Å–æ–º
func isIPAddress(ip string) bool {
	return net.ParseIP(ip) != nil
}

// isCIDRRange –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ CIDR –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
func isCIDRRange(cidr string) bool {
	_, _, err := net.ParseCIDR(cidr)
	return err == nil
}

// isIPInCIDR –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥–∏—Ç –ª–∏ IP –≤ CIDR –¥–∏–∞–ø–∞–∑–æ–Ω
func isIPInCIDR(ipStr, cidrStr string) bool {
	ip := net.ParseIP(ipStr)
	if ip == nil {
		return false
	}

	_, network, err := net.ParseCIDR(cidrStr)
	if err != nil {
		return false
	}

	return network.Contains(ip)
}

// getClientType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
func getClientType(r *http.Request) string {
	if r.Header.Get("Origin") != "" {
		return "browser"
	}
	clientIP := extractClientIP(r)
	if isLocalRequest(clientIP) {
		return "local"
	}
	return "external"
}

// extractDomainFromURL –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL
func extractDomainFromURL(urlStr string) string {
	urlStr = strings.TrimSpace(urlStr)
	if urlStr == "" {
		return ""
	}
	
	if !strings.Contains(urlStr, "://") {
		urlStr = "https://" + urlStr
	}
	
	parts := strings.Split(urlStr, "://")
	if len(parts) < 2 {
		return ""
	}
	
	hostParts := strings.Split(parts[1], "/")
	host := hostParts[0]
	
	// –£–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
	return strings.Split(host, ":")[0]
}

func jsonError(w http.ResponseWriter, message string, statusCode int) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	json.NewEncoder(w).Encode(map[string]string{
		"error":   http.StatusText(statusCode),
		"message": message,
	})
}