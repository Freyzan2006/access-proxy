package ratelimit

import (
	"fmt"
	"net/http"
	"sync"
	"time"

	"github.com/Freyzan2006/go-logger-lib/pkg/logger"
)

type RateLimiter struct {
	mu          sync.Mutex
	requests    map[string][]time.Time
	limit       int
	window      time.Duration
	log         logger.Logger
}

func NewRateLimiter(limitPerMinute int, log logger.Logger) *RateLimiter {
	return &RateLimiter{
		requests: make(map[string][]time.Time),
		limit:    limitPerMinute,
		window:   time.Minute,
		log:      log,
	}
}

func (rl *RateLimiter) Allow(identifier string) bool {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	now := time.Now()
	
	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
	rl.cleanup(identifier, now)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
	if len(rl.requests[identifier]) >= rl.limit {
		return false
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
	rl.requests[identifier] = append(rl.requests[identifier], now)
	return true
}

func (rl *RateLimiter) cleanup(identifier string, now time.Time) {
	validRequests := []time.Time{}
	
	for _, t := range rl.requests[identifier] {
		if now.Sub(t) <= rl.window {
			validRequests = append(validRequests, t)
		}
	}
	
	rl.requests[identifier] = validRequests
}

func (rl *RateLimiter) GetRemaining(identifier string) int {
	rl.mu.Lock()
	defer rl.mu.Unlock()
	
	rl.cleanup(identifier, time.Now())
	return rl.limit - len(rl.requests[identifier])
}

// Middleware –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
func (rl *RateLimiter) Middleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º IP –∞–¥—Ä–µ—Å –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
		identifier := getClientIP(r)
		
		if !rl.Allow(identifier) {
			rl.log.Warnf("üö´ Rate limit exceeded for %s: %s %s", identifier, r.Method, r.URL.Path)
			
			w.Header().Set("Content-Type", "application/json")
			w.Header().Set("X-RateLimit-Limit", fmt.Sprintf("%d", rl.limit))
			w.Header().Set("X-RateLimit-Remaining", "0")
			w.Header().Set("X-RateLimit-Reset", fmt.Sprintf("%d", time.Now().Add(time.Minute).Unix()))
			
			w.WriteHeader(http.StatusTooManyRequests)
			w.Write([]byte(`{
				"error": "rate_limit_exceeded",
				"message": "Too many requests",
				"limit": "` + fmt.Sprintf("%d", rl.limit) + ` per minute",
				"retry_after": "60 seconds"
			}`))
			return
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–µ
		remaining := rl.GetRemaining(identifier)
		w.Header().Set("X-RateLimit-Limit", fmt.Sprintf("%d", rl.limit))
		w.Header().Set("X-RateLimit-Remaining", fmt.Sprintf("%d", remaining))
		
		rl.log.Infof("üìä Rate limit: %s has %d/%d requests remaining", identifier, remaining, rl.limit)
		next.ServeHTTP(w, r)
	})
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∫–ª–∏–µ–Ω—Ç–∞
func getClientIP(r *http.Request) string {
	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP –∏–∑ X-Forwarded-For (–µ—Å–ª–∏ –∑–∞ –ø—Ä–æ–∫—Å–∏)
	if forwarded := r.Header.Get("X-Forwarded-For"); forwarded != "" {
		return forwarded
	}
	
	// –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º RemoteAddr
	return r.RemoteAddr
}

func (rl *RateLimiter) GetLimit() int {
	return rl.limit
}